#!/usr/bin/env python
# Time-stamp: <2025-06-01 12:08:55 Shengen Hu>
 
"""Description: software package for "SELMA: a computational framework for modeling intrinsic biases in chromatin accessibility sequencing data"
Copyright (c) 2025 Shengen Hu <tarelahu@gmail.com>
This code is free software; you can redistribute it and/or modify it
under the terms of the BSD License (see the file COPYING included with
the distribution).
@status: release candidate
@version: $Id$
@author:  Shengen Hu
@contact: tarelahu@gmail.com
"""

# ------------------------------------
# python modules
# ------------------------------------

import os
import sys
import time
import string
from optparse import OptionParser
import subprocess
import time

# ------------------------------------
# own python modules
# ------------------------------------

### tool function
from PATTYpipe.Utility import (sp,
                    raise_error,
                    wlog,
                    CMD
                    )
                                   
# -------------------
# main step
# -------------------

from PATTYpipe.step0_check_data import step0_check_data
from PATTYpipe.step1_QC_format import step1_QC_format
from PATTYpipe.step2_BULKscanSig import step2_BULKscanSig
from PATTYpipe.step3_BULKcorrect import step3_BULKcorrect
from PATTYpipe.step2_SCscanSig import step2_SCscanSig
from PATTYpipe.step3_SCcorrect import step3_SCcorrect
from PATTYpipe.step4_SCcellClustering import step4_SCcellClustering
from PATTYpipe.stepFinal_summary import stepFinal_summary

# ------------------------------------
# read in parameters
# ------------------------------------

def main():
    '''
    Read parameter 
    '''
    usage = "%prog -m bulk -a CUTTag.bed -a ATAC -f H3K27me3 -g hg38 -o outname "
    description = """PATTY: a computational method for correcting open chromatin bias in bulk and single-cell CUT&Tag data"""

    optparser = OptionParser(version="%prog 1.0.0",description=description,usage=usage,add_help_option=False)
    optparser.add_option("-h","--help",action="help",help="Show this help message and exit.")

#========major options=============
    optparser.add_option("-m","--mode",dest="mode",type="choice",choices=("sc","bulk"),
                             help = "[required] Mode of PATTY, choose from bulk or sc(single-cell)")
    optparser.add_option("-c","--cuttag", dest = 'cuttag',type="str",
                             help = "[required] CUTTAG Input fragments file in (paired/single end) bed format for CUT&Tag data, with .bed extension (or .bed.gz for comparessed file). For sc mode, the 4th(name) column of the bed file represents the name/barcode of the corresponding individual cell" )
    optparser.add_option("-a","--atac", dest = 'atac',type="str",
                             help = "[required] ATAC Input fragments file in bed format for ATAC-seq data, with .bed extension(or .bed.gz for comparessed file). The ATAC-seq fragments were used as bulk data for both sc and bulk modes (only chrm,start,end 3columns are required)" )
    optparser.add_option("-f","--factor",dest='factor',type="choice",choices=("H3K27me3","H3K27ac","H3K9me3"),
                             help = "[required] FACTOR Factor type of the CUT&Tag data. Currently PATTY support H3K27me3 (default), H3K27ac, and H3K9me3" )
    optparser.add_option("-g","--genome",dest='genome',type="str",default="hg38",
                             help = "[required] genome version of the input data, choose from hg38 (default) and mm10" )
    optparser.add_option("-o","--outname", dest="outname",type="str",
                             help = "[required] Name of output results" )

#========minor options============= 
    optparser.add_option("--binMinReads",dest="binminreads",type="str",default="5",
                         help="[optional] Bins with < 5(default) reads covered will be discarded in the analysis. For sc mode, bins with a total of < 5 (default) reads across all high-quality cells will be discarded. set 0 to turn off this parameter")
    optparser.add_option("--binList",dest="binlist",type="str",
                         help="[optional] Bed file for inputting candidate bins/peaks for the analysis. When inputted, the correction will be done in only these bins for bulk mode. The correction/clustering will be only done these bins for sc mode. This parameter is designed for customized high-reads bin (bulk mode) or high-var bin (sc mode). The inputed peaks/bins will be transformed/splited to 200bp bins for as the input")
#    optparser.add_option("--peakCutoff",dest="peakcutoff",type="float",default=0,
#                         help="[optional] set a cutoff to perform peak calling")
    optparser.add_option("--cellnames",dest="cellnames",type="str",
                         help="[sc optional] Single column file for name list of used individual cells, each line contain the name of the individual cell. This parameter is only used for sc mode")
    optparser.add_option("--readCutoff",dest="readcutoff",type="int",default=10000,
                         help="[sc optional] Reads number cutoff for high quality cells. Cells with < 10000(default) reads will be discarded in the analysis. Set 0 to turn off this parameter")
    optparser.add_option("--clusterMethod",dest="clustermethod",type="choice",default="Kmeans",choices=("Kmeans","Seurat","APEC","scran"),
                         help="[sc optional] Method used for single cell clustering analysis. Default is Kmeans(PCA dim reduction + K-means clustering. Optional choices (Seurat,scran,APEC) require related packages installed")
    optparser.add_option("--clusterNum",dest="clusterNum",type="int",default=10,
                         help="[sc optional] number of clusters specified for clustering(default=10). Only used for PCAkm[clusterMethod] method")
    optparser.add_option("--topDim",dest="topDim",type="int",default=60,
                         help="[sc optional] number of dimensions (with highest Variance) used for clustering. Only used for PCAkm(PC) and Seurat/scran (Latent variable). This number is suggested to be >=30 (deafult=60)")
    optparser.add_option("--UMAP",dest="UMAP",default=False, action='store_true', 
                         help="[sc optional] Turn on this parameter to generate a UMAP plot (tSNE for APEC and Cicero) for the clustering results")
    optparser.add_option("--overwrite",dest='fover',  default=False, action='store_true', 
                         help = "[optional] Force overwrite, this cmd will remove existing result if set !! " )
    optparser.add_option("--keeptmp",dest='keeptmp',  default=False, action='store_true', 
                         help = "[optional] whether or not keep the intermediate results (tmpResults)" )

    (options,args) = optparser.parse_args()

    if not options.mode:
        optparser.print_help()
        print('SELMA mode (-m) is required ')
        sys.exit(1)

    if not options.fragments:
        optparser.print_help()
        print('Input fragments file (-i) is required ')
        sys.exit(1)

    if not options.outname:
        optparser.print_help()
        print('Output file name (-o) is required ')
        sys.exit(1)

    if not options.datatype:
        optparser.print_help()
        print('Datatype (-t) is required ')
        sys.exit(1)

    if not options.sequence:
        optparser.print_help()
        print('genome sequence file (-s) is required ')
        sys.exit(1)

    conf_dict = {}
    conf_dict['General'] = {}
    conf_dict['options'] = {}

    conf_dict['General']['mode'] = options.mode
    conf_dict['General']['fragments'] = options.fragments
    conf_dict['General']['format'] = options.format
    conf_dict['General']['genome'] = options.genome
    conf_dict['General']['sequence'] = options.sequence
    conf_dict['General']['datatype'] = options.datatype
    conf_dict['General']['outname'] = options.outname
    conf_dict['options']['peak'] = options.peak
    conf_dict['options']['extend'] = options.extend
    conf_dict['options']['peakqval'] = options.peakqval
    conf_dict['options']['bias'] = options.bias
    conf_dict['options']['kmer'] = options.kmer
    conf_dict['options']['scATAC10x'] = options.scATAC10x
    conf_dict['options']['cellnames'] = options.cellnames
    conf_dict['options']['readcutoff'] = options.readcutoff
    conf_dict['options']['SCcorrection'] = options.SCcorrection
    conf_dict['options']['SCmodel'] = "beta1"#options.SCmodel
    conf_dict['options']['peakminreads'] = options.peakminreads
    conf_dict['options']['peakmaxreads'] = options.peakmaxreads
    conf_dict['options']['lowbiaspeak'] = options.lowbiaspeak
    conf_dict['options']['clustermethod'] = options.clustermethod
    conf_dict['options']['clusterNum'] = options.clusterNum    
    conf_dict['options']['topDim'] = options.topDim    
    conf_dict['options']['UMAP'] = options.UMAP 
    conf_dict['options']['keeptmp'] = options.keeptmp
    ### read raw path of output dir, the startdir will be used when the input file is not in absolute path
    conf_dict['General']['startdir'] = os.getcwd()+'/'

    ### check parameters: 
    if "~" in conf_dict['General']['outname']:
        print('ERROR: ~ cannot appeared in outname, current outname is %s'%(conf_dict['General']['outname']))
        sys.exit(1)
    if "/" in conf_dict['General']['outname']:
        print('ERROR: / cannot appeared in outname, current outname is %s'%(conf_dict['General']['outname']))
        sys.exit(1)
    
    ### creat output dir
    if os.path.isfile(conf_dict['General']['outname']):
        print('ERROR: name of your output dir %s is exist as a file, cannot create a dir, exit'%(conf_dict['General']['outname']))
        sys.exit(1)
    elif os.path.isdir(conf_dict['General']['outname']):
        if not options.fover:
            print('ERROR: name of your output dir is exist as a dir, exit because overwrite function is turned off, you can add --overwrite parameter to turn on overwrite function')
            sys.exit(1)
        else: 
            print('name of your output dir is exist as a dir, overwrite is turned on, write output result in existing dir')
    else:
        os.system("mkdir %s"%(conf_dict['General']['outname']))

    ### move to output dir
    os.chdir(conf_dict['General']['outname'])
    ### specify the main progress log file
    logfile = conf_dict['General']['outname']+'_progress.log'
    ### remove existing log file. 
    if os.path.isfile(logfile):
        if options.fover:
            CMD('rm %s'%logfile)
            print('process log is printed into %s'%(logfile))
        else:
            logfile_orig = logfile
            logfile += str(time.time())
            print('process log is printed into %s, because %s exists and overwrite function is turned off'%(logfile,logfile_orig))
    else:
        print('process log is printed into %s'%(logfile))

    conf_dict['QC'] = {}
    conf_dict['results'] = {}

    wlog("Start SELMA %s"%(conf_dict['General']['mode']),logfile)
    wlog("Step0: check input Data and parameters",logfile)   
    step0_check_data(conf_dict,logfile)
    wlog('Step0 check input Data and parameters DONE',logfile)

    # QC, reformat
    t = time.time()
    wlog("Step1: check quality and reformat data",logfile)
    step1_QC_format(conf_dict,logfile)
    step1time = time.time() -t
    wlog("Step1: check quality and reformat data DONE",logfile)
    wlog("running time for Step1 : %s"%(step1time),logfile)

    # bias matrix
    t = time.time()
    wlog("Step2: bias estimation",logfile)
    step2_biasMat(conf_dict,logfile)
    step2time = time.time()-t
    wlog("Step2: bias estimation",logfile)
    wlog("running time for Step2: bias estimation: %s"%(step2time),logfile)

    # peak calling
    t = time.time()
    wlog('Step3: peak detection',logfile)
    step3_callpeak(conf_dict,logfile)
    step3time = time.time() -t
    wlog("running time for Step3: peak detection %s"%(step3time),logfile)
 
    if conf_dict['General']['mode'] == "bulk":
       # cleavage bias
       t = time.time()
       wlog('Step4: generate cleavage and bias profile on peaks',logfile)
       step4_BULKcleavageBias(conf_dict,logfile)
       step4time = time.time() -t
       wlog("running time for Step4: generate cleavage and bias profile on peaks %s"%(step4time),logfile)
    else:
       # sc peak bias
       t = time.time()
       wlog('Step4: peak level bias estimation for single-cell',logfile)
       step4_SCpeakbias(conf_dict,logfile)
       step4time = time.time() -t
       wlog("running time for Step4: peak level bias estimation for single-cell %s"%(step4time),logfile)

       # sc clustering
       t = time.time()
       wlog('Step5: single-cell clustering',logfile)
       step5_SCcellClustering(conf_dict,logfile)
       step5time = time.time() -t
       wlog("running time for Step5: single-cell clustering %s"%(step5time),logfile)

    # summary
    t = time.time()
    wlog('StepFinal: summary',logfile)
    stepFinal_summary(conf_dict,logfile)
    stepFtime = time.time() -t
    wlog("running time for StepFinal: summary %s"%(stepFtime),logfile)

    wlog("SELMA finished. Check the folder: %s/summary/ for results"%(conf_dict['General']['outname']),logfile)

if __name__== '__main__':
    try:
        main()

    except KeyboardInterrupt:
        sys.stderr.write("User interrupt me >.< \n")
        sys.exit(0)

